buildscript {
	ext {
		springBootVersion = '1.5.6.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

//mybatis的Generator插件入口
configurations {
	mybatisGenerator
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'

version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter-aop')
	compile('org.springframework.boot:spring-boot-starter-data-redis')
	compile('org.mybatis.spring.boot:mybatis-spring-boot-starter:1.3.1')
	compile('com.github.pagehelper:pagehelper:4.1.1')
	compile('org.springframework.boot:spring-boot-starter-web')
	runtime('org.springframework.boot:spring-boot-devtools')
    compile('io.springfox:springfox-swagger2:2.7.0')
    compile('io.springfox:springfox-swagger-ui:2.7.0')
    compile('org.apache.commons:commons-lang3:3.1')
    compile('io.jsonwebtoken:jjwt:0.7.0')
//	compile('org.springframework.boot:spring-boot-starter-security')
//	compile group: 'org.mybatis.generator', name: 'mybatis-generator-core', version: '1.3.5'
	mybatisGenerator 'org.mybatis.generator:mybatis-generator-core:1.3.5'
	runtime('mysql:mysql-connector-java')
	mybatisGenerator 'mysql:mysql-connector-java:5.1.43'
	mybatisGenerator 'tk.mybatis:mapper:3.3.9'
	testCompile('org.springframework.boot:spring-boot-starter-test')
}

def getDbProperties = {
	def properties = new Properties()
	file("src/main/resources/application.properties").withInputStream { inputStream ->
		properties.load(inputStream)
	}
    file("src/main/resources/generator/generator.properties").withInputStream { inputStream ->
        properties.load(inputStream)
    }
	properties
}
task mybatisGenerate << {
	def properties = getDbProperties()
	ant.properties['targetProject'] = projectDir.path
	ant.properties['driverClass'] = properties.getProperty("spring.datasource.driver-class-name")
	ant.properties['connectionURL'] = properties.getProperty("spring.datasource.url")
	ant.properties['userId'] = properties.getProperty("spring.datasource.username")
	ant.properties['password'] = properties.getProperty("spring.datasource.password")
	ant.properties['src_main_java'] = sourceSets.main.java.srcDirs[0].path
	ant.properties['src_main_resources'] = sourceSets.main.resources.srcDirs[0].path
	ant.properties['modelPackage'] = properties.getProperty("package.model")
	ant.properties['mapperPackage'] = properties.getProperty("package.mapper")
	ant.properties['sqlMapperPackage'] = properties.getProperty("package.xml")
	ant.taskdef(
			name: 'mbgenerator',
			classname: 'org.mybatis.generator.ant.GeneratorAntTask',
			classpath: configurations.mybatisGenerator.asPath
	)
	ant.mbgenerator(overwrite: true,
			configfile: '/Users/zhangbo/Documents/IDEAWorkSpace/jurua-api/src/main/resources/generator/generatorConfig.xml', verbose: true) {
		propertyset {
			propertyref(name: 'targetProject')
			propertyref(name: 'userId')
			propertyref(name: 'driverClass')
			propertyref(name: 'connectionURL')
			propertyref(name: 'password')
			propertyref(name: 'src_main_java')
			propertyref(name: 'src_main_resources')
			propertyref(name: 'modelPackage')
			propertyref(name: 'mapperPackage')
			propertyref(name: 'sqlMapperPackage')
		}
	}
}
